# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Country(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, countrycode: str=None, shortname: str=None, tablename: str=None, longname: str=None, alpha2code: str=None, currencyunit: str=None, specialnotes: str=None, region: str=None, incomegroup: str=None, wb2code: str=None, nationalaccountbaseyear: int=None, nationalaccountreferenceyear: int=None, snapricevaluation: str=None, lendingcategory: str=None, othergroups: str=None, systemofnationalaccounts: str=None):  # noqa: E501
        """Country - a model defined in Swagger

        :param countrycode: The countrycode of this Country.  # noqa: E501
        :type countrycode: str
        :param shortname: The shortname of this Country.  # noqa: E501
        :type shortname: str
        :param tablename: The tablename of this Country.  # noqa: E501
        :type tablename: str
        :param longname: The longname of this Country.  # noqa: E501
        :type longname: str
        :param alpha2code: The alpha2code of this Country.  # noqa: E501
        :type alpha2code: str
        :param currencyunit: The currencyunit of this Country.  # noqa: E501
        :type currencyunit: str
        :param specialnotes: The specialnotes of this Country.  # noqa: E501
        :type specialnotes: str
        :param region: The region of this Country.  # noqa: E501
        :type region: str
        :param incomegroup: The incomegroup of this Country.  # noqa: E501
        :type incomegroup: str
        :param wb2code: The wb2code of this Country.  # noqa: E501
        :type wb2code: str
        :param nationalaccountbaseyear: The nationalaccountbaseyear of this Country.  # noqa: E501
        :type nationalaccountbaseyear: int
        :param nationalaccountreferenceyear: The nationalaccountreferenceyear of this Country.  # noqa: E501
        :type nationalaccountreferenceyear: int
        :param snapricevaluation: The snapricevaluation of this Country.  # noqa: E501
        :type snapricevaluation: str
        :param lendingcategory: The lendingcategory of this Country.  # noqa: E501
        :type lendingcategory: str
        :param othergroups: The othergroups of this Country.  # noqa: E501
        :type othergroups: str
        :param systemofnationalaccounts: The systemofnationalaccounts of this Country.  # noqa: E501
        :type systemofnationalaccounts: str
        """
        self.swagger_types = {
            'countrycode': str,
            'shortname': str,
            'tablename': str,
            'longname': str,
            'alpha2code': str,
            'currencyunit': str,
            'specialnotes': str,
            'region': str,
            'incomegroup': str,
            'wb2code': str,
            'nationalaccountbaseyear': int,
            'nationalaccountreferenceyear': int,
            'snapricevaluation': str,
            'lendingcategory': str,
            'othergroups': str,
            'systemofnationalaccounts': str
        }

        self.attribute_map = {
            'countrycode': 'countrycode',
            'shortname': 'shortname',
            'tablename': 'tablename',
            'longname': 'longname',
            'alpha2code': 'alpha2code',
            'currencyunit': 'currencyunit',
            'specialnotes': 'specialnotes',
            'region': 'region',
            'incomegroup': 'incomegroup',
            'wb2code': 'wb2code',
            'nationalaccountbaseyear': 'nationalaccountbaseyear',
            'nationalaccountreferenceyear': 'nationalaccountreferenceyear',
            'snapricevaluation': 'snapricevaluation',
            'lendingcategory': 'lendingcategory',
            'othergroups': 'othergroups',
            'systemofnationalaccounts': 'systemofnationalaccounts'
        }

        self._countrycode = countrycode
        self._shortname = shortname
        self._tablename = tablename
        self._longname = longname
        self._alpha2code = alpha2code
        self._currencyunit = currencyunit
        self._specialnotes = specialnotes
        self._region = region
        self._incomegroup = incomegroup
        self._wb2code = wb2code
        self._nationalaccountbaseyear = nationalaccountbaseyear
        self._nationalaccountreferenceyear = nationalaccountreferenceyear
        self._snapricevaluation = snapricevaluation
        self._lendingcategory = lendingcategory
        self._othergroups = othergroups
        self._systemofnationalaccounts = systemofnationalaccounts

    @classmethod
    def from_dict(cls, dikt) -> 'Country':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Country of this Country.  # noqa: E501
        :rtype: Country
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countrycode(self) -> str:
        """Gets the countrycode of this Country.


        :return: The countrycode of this Country.
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode: str):
        """Sets the countrycode of this Country.


        :param countrycode: The countrycode of this Country.
        :type countrycode: str
        """

        self._countrycode = countrycode

    @property
    def shortname(self) -> str:
        """Gets the shortname of this Country.


        :return: The shortname of this Country.
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname: str):
        """Sets the shortname of this Country.


        :param shortname: The shortname of this Country.
        :type shortname: str
        """

        self._shortname = shortname

    @property
    def tablename(self) -> str:
        """Gets the tablename of this Country.


        :return: The tablename of this Country.
        :rtype: str
        """
        return self._tablename

    @tablename.setter
    def tablename(self, tablename: str):
        """Sets the tablename of this Country.


        :param tablename: The tablename of this Country.
        :type tablename: str
        """

        self._tablename = tablename

    @property
    def longname(self) -> str:
        """Gets the longname of this Country.


        :return: The longname of this Country.
        :rtype: str
        """
        return self._longname

    @longname.setter
    def longname(self, longname: str):
        """Sets the longname of this Country.


        :param longname: The longname of this Country.
        :type longname: str
        """

        self._longname = longname

    @property
    def alpha2code(self) -> str:
        """Gets the alpha2code of this Country.


        :return: The alpha2code of this Country.
        :rtype: str
        """
        return self._alpha2code

    @alpha2code.setter
    def alpha2code(self, alpha2code: str):
        """Sets the alpha2code of this Country.


        :param alpha2code: The alpha2code of this Country.
        :type alpha2code: str
        """

        self._alpha2code = alpha2code

    @property
    def currencyunit(self) -> str:
        """Gets the currencyunit of this Country.


        :return: The currencyunit of this Country.
        :rtype: str
        """
        return self._currencyunit

    @currencyunit.setter
    def currencyunit(self, currencyunit: str):
        """Sets the currencyunit of this Country.


        :param currencyunit: The currencyunit of this Country.
        :type currencyunit: str
        """

        self._currencyunit = currencyunit

    @property
    def specialnotes(self) -> str:
        """Gets the specialnotes of this Country.


        :return: The specialnotes of this Country.
        :rtype: str
        """
        return self._specialnotes

    @specialnotes.setter
    def specialnotes(self, specialnotes: str):
        """Sets the specialnotes of this Country.


        :param specialnotes: The specialnotes of this Country.
        :type specialnotes: str
        """

        self._specialnotes = specialnotes

    @property
    def region(self) -> str:
        """Gets the region of this Country.


        :return: The region of this Country.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this Country.


        :param region: The region of this Country.
        :type region: str
        """

        self._region = region

    @property
    def incomegroup(self) -> str:
        """Gets the incomegroup of this Country.


        :return: The incomegroup of this Country.
        :rtype: str
        """
        return self._incomegroup

    @incomegroup.setter
    def incomegroup(self, incomegroup: str):
        """Sets the incomegroup of this Country.


        :param incomegroup: The incomegroup of this Country.
        :type incomegroup: str
        """

        self._incomegroup = incomegroup

    @property
    def wb2code(self) -> str:
        """Gets the wb2code of this Country.


        :return: The wb2code of this Country.
        :rtype: str
        """
        return self._wb2code

    @wb2code.setter
    def wb2code(self, wb2code: str):
        """Sets the wb2code of this Country.


        :param wb2code: The wb2code of this Country.
        :type wb2code: str
        """

        self._wb2code = wb2code

    @property
    def nationalaccountbaseyear(self) -> int:
        """Gets the nationalaccountbaseyear of this Country.


        :return: The nationalaccountbaseyear of this Country.
        :rtype: int
        """
        return self._nationalaccountbaseyear

    @nationalaccountbaseyear.setter
    def nationalaccountbaseyear(self, nationalaccountbaseyear: int):
        """Sets the nationalaccountbaseyear of this Country.


        :param nationalaccountbaseyear: The nationalaccountbaseyear of this Country.
        :type nationalaccountbaseyear: int
        """

        self._nationalaccountbaseyear = nationalaccountbaseyear

    @property
    def nationalaccountreferenceyear(self) -> int:
        """Gets the nationalaccountreferenceyear of this Country.


        :return: The nationalaccountreferenceyear of this Country.
        :rtype: int
        """
        return self._nationalaccountreferenceyear

    @nationalaccountreferenceyear.setter
    def nationalaccountreferenceyear(self, nationalaccountreferenceyear: int):
        """Sets the nationalaccountreferenceyear of this Country.


        :param nationalaccountreferenceyear: The nationalaccountreferenceyear of this Country.
        :type nationalaccountreferenceyear: int
        """

        self._nationalaccountreferenceyear = nationalaccountreferenceyear

    @property
    def snapricevaluation(self) -> str:
        """Gets the snapricevaluation of this Country.


        :return: The snapricevaluation of this Country.
        :rtype: str
        """
        return self._snapricevaluation

    @snapricevaluation.setter
    def snapricevaluation(self, snapricevaluation: str):
        """Sets the snapricevaluation of this Country.


        :param snapricevaluation: The snapricevaluation of this Country.
        :type snapricevaluation: str
        """

        self._snapricevaluation = snapricevaluation

    @property
    def lendingcategory(self) -> str:
        """Gets the lendingcategory of this Country.


        :return: The lendingcategory of this Country.
        :rtype: str
        """
        return self._lendingcategory

    @lendingcategory.setter
    def lendingcategory(self, lendingcategory: str):
        """Sets the lendingcategory of this Country.


        :param lendingcategory: The lendingcategory of this Country.
        :type lendingcategory: str
        """

        self._lendingcategory = lendingcategory

    @property
    def othergroups(self) -> str:
        """Gets the othergroups of this Country.


        :return: The othergroups of this Country.
        :rtype: str
        """
        return self._othergroups

    @othergroups.setter
    def othergroups(self, othergroups: str):
        """Sets the othergroups of this Country.


        :param othergroups: The othergroups of this Country.
        :type othergroups: str
        """

        self._othergroups = othergroups

    @property
    def systemofnationalaccounts(self) -> str:
        """Gets the systemofnationalaccounts of this Country.


        :return: The systemofnationalaccounts of this Country.
        :rtype: str
        """
        return self._systemofnationalaccounts

    @systemofnationalaccounts.setter
    def systemofnationalaccounts(self, systemofnationalaccounts: str):
        """Sets the systemofnationalaccounts of this Country.


        :param systemofnationalaccounts: The systemofnationalaccounts of this Country.
        :type systemofnationalaccounts: str
        """

        self._systemofnationalaccounts = systemofnationalaccounts
